# AW11 Scheme and examples implemented in python which use the functions
# implemented in (rabe::schemes::aw11)
from rabe_py import aw11

# Implements the encryption and decryption methods in the AW11 Scheme
# Returns a plaintext
def run_aw11():
    gk = aw11.setup()
    (pk, msk) = aw11.authgen(gk, ["A", "B"])
    plaintext = "our plaintext!"
    policy = '"A" or "B"'
    bob = aw11.keygen(gk, msk, "bob", ["A"]) 
    ciphertext = aw11.encrypt(gk, pk, policy, plaintext)
    plaintext_after = aw11.decrypt(gk, bob, ciphertext)

    print("".join(chr(i) for i in plaintext_after))


# This function encrypts plaintext data using a given JSON string policy and a list of attributes
# produces a ciphertext if successfull.
#
#  Arguments:
# * plaintext  - The plaintext data given as a string.
# * attributes - A list of string attributes assigned to this authority
# * policy     - A JSON string policy describing the access rights
#
# Returns:
# * gk         - A Global Parameters Key, generated by aw11.setup().
# * ciphertext - The ciphertext generated by aw11.encrypt().
# * msk        - The master key associated with an authority and generated by aw11.authgen().
def encrypt(plaintext:str, attributes:list[str], policy:str):
    gk = aw11.setup()
    (pk, msk) = aw11.authgen(gk, attributes)
    ciphertext = aw11.encrypt(gk, pk, policy, plaintext)
    return gk, ciphertext, msk


# This function decrypts a 'PyAw11Ciphertext' if the attributes in msk match the policy of ct.
# 
# Arguments:
# * gk             - A Global Parameters Key, generated by aw11.setup().
# * ciphertext     - The ciphertext generated by aw11.encrypt().
# * msk            - A Master Key, assoicated with an authority and generated by authgen().
# * user_name      - The name of the user the key is associated with. Must be unique.
# * user_attribute - A list of string attributes assigned to this user_name.
# 
# Returns:
# * plaintext - The decrypted ciphertext as a list of u8's.
def decrypt(gk, ciphertext, msk, user_name:str, user_attribute:list[str]):
    sk = aw11.keygen(gk, msk, user_name, user_attribute)
    plaintext = aw11.decrypt(gk, sk, ciphertext)
    return plaintext



(gk, ciphertext, msk) = encrypt(plaintext="our plaintext!",
                                attributes=["A", "B"],
                                policy='"A" or "B"' )
                        

plaintext = decrypt(gk,
                    ciphertext, 
                    msk, 
                    user_name="bob", 
                    user_attribute=["A"])

print("".join(chr(i) for i in plaintext))


#run_aw11()