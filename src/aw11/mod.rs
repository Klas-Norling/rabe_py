//! AW11 Encryption and Decryption interface for python
//! ---
//! This is a wrapper
//! Implented in [the aw11 source](rabe::schemes::aw11)
//!
//!
//! [`]

use pyo3::exceptions::PyValueError;
use pyo3::prelude::*;
use rabe::schemes::aw11::{
    authgen as aw11_authgen, decrypt as aw11_decrypt, encrypt as aw11_encrypt,
    keygen as aw11_keygen, setup as aw11_setup,
};
use rabe::utils::policy::pest::PolicyLanguage;

pub mod types;
use types::*;

/// Sets up a new AW11 Scheme by creating a Global Parameters Key (gk)
#[pyfunction]
pub fn setup() -> PyResult<PyAw11GlobalKey> {
    let gk = aw11_setup();
    let gk = PyAw11GlobalKey { gk };
    Ok(gk)
}

/// Sets up a new AW11 Authority by creating a key pair:
/// Public Key (pk) and Master key (mk)
///
/// # Arguments
/// * [gk](types:PyAw11GlobalKey)- A Global Parameters  Key (gk), generated by function setup()
/// * attributes - A vector of string attributes assigned to this Authority
#[pyfunction]
pub fn authgen(
    gk: &PyAw11GlobalKey,
    attributes: Vec<String>,
) -> PyResult<(PyAw11PublicKey, PyAw11MasterKey)> {
    match aw11_authgen(&gk.gk, &attributes) {
        Some((pk, msk)) => Ok((PyAw11PublicKey { pks: vec![pk] }, PyAw11MasterKey { msk })),
        _ => return Err(PyErr::new::<PyValueError, _>("None")),
    }
}

/// Sets up and generates a new User by creating a secret user key (sk).
/// This key is created for a user with a given "name" on the given set of attributes.
///
/// # Arguments
/// * gk - A Global Parameters Key (gk), generated by setup().
/// * msk - A Master Key (msk), associated with an authority and generated by authgen().
/// * name - The name of the user the key is associated with, must be unique.
/// * attributes - A vector of string attributes assigned to this user.
#[pyfunction]
pub fn keygen(
    gk: &PyAw11GlobalKey,
    msk: &PyAw11MasterKey,
    name: String,
    attributes: Vec<String>,
) -> PyResult<PyAw11SecretKey> {
    let sk = match aw11_keygen(&gk.gk, &msk.msk, &name, &attributes) {
        Ok(sk) => PyAw11SecretKey { sk },
        Err(e) => return Err(PyErr::new::<PyValueError, _>(format!("{}", e))),
    };
    Ok(sk)
}

/// This function encrypts plaintext data using a given JSON String Policy
/// and produces a 'PyAw11Ciphertext' if successfull
///
/// # Arguments
/// * gk - A Global Parameters Key (gk), generated by setup().
/// * pk - A Public Parameters key (pk), generated by authgen().
/// * policy - A JSON String policy describing the access rights.
/// * plaintext - The plaintext data given as a string.
#[pyfunction]
pub fn encrypt(
    gk: &PyAw11GlobalKey,
    pk: &PyAw11PublicKey,
    policy: String,
    plaintext: String,
) -> PyResult<PyAw11Ciphertext> {
    let plaintext = plaintext.into_bytes();
    let ct = match aw11_encrypt(
        &gk.gk,
        &pk.pks,
        &policy,
        PolicyLanguage::HumanPolicy,
        &plaintext,
    ) {
        Ok(ct) => PyAw11Ciphertext { ct },
        Err(e) => return Err(PyErr::new::<PyValueError, _>(format!("{}", e))),
    };
    Ok(ct)
}

/// This function decrypts a 'PyAw11CipherText' if the attributes in sk
/// match the policy of ct. If successfull returns plaintext data as a vector of u8's.
///
/// # Arguments
/// * gk - A Global Parameters Key (gk), generated by setup().
/// * sk - A Secret user Key (sk), associated with a set of attributes and generated by keygen().
/// * ct - A PyAw11Ciphertext generated by encrypt().
#[pyfunction]
pub fn decrypt(
    gk: &PyAw11GlobalKey,
    sk: &PyAw11SecretKey,
    ct: &PyAw11Ciphertext,
) -> PyResult<Vec<u8>> {
    let plaintext: Vec<u8> = match aw11_decrypt(&gk.gk, &sk.sk, &ct.ct) {
        Ok(plaintext) => plaintext,
        Err(e) => return Err(PyErr::new::<PyValueError, _>(format!("{}", e))),
    };
    Ok(plaintext)
}

/// Adds functions that are supposed to be called from python.
/// A function that adds the classes and functions that should be accessible from python.
#[pymodule]
pub fn aw11(_py: Python, m: &PyModule) -> PyResult<()> {
    crate::add_functions!(m;setup,authgen,keygen,encrypt,decrypt);
    crate::add_types!(m;PyAw11Ciphertext,PyAw11GlobalKey,PyAw11MasterKey,PyAw11PublicKey,PyAw11SecretKey);

    Ok(())
}
